const nodemailer = require("nodemailer");

class EmailService {
  constructor() {
    // T·∫°o transporter v·ªõi c·∫•u h√¨nh Gmail
    this.transporter = nodemailer.createTransport({
      host: process.env.EMAIL_HOST,
      port: process.env.EMAIL_PORT,
      secure: false, // true for 465, false for other ports
      auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS,
      },
    });
  }

  // G·ª≠i email reset password
  async sendResetPasswordEmail(email, resetToken, userName) {
    try {
      const resetUrl = `${
        process.env.CLIENT_URL || "http://localhost:3000"
      }/reset-password?token=${resetToken}`;

      const mailOptions = {
        from: `"H·ªá Th·ªëng Qu·∫£n L√Ω User" <${process.env.EMAIL_FROM}>`,
        to: email,
        subject: "üîê Y√™u C·∫ßu ƒê·∫∑t L·∫°i M·∫≠t Kh·∫©u",
        html: `
          <!DOCTYPE html>
          <html>
          <head>
            <meta charset="utf-8">
            <style>
              .container { max-width: 600px; margin: 0 auto; font-family: Arial, sans-serif; }
              .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 2rem; text-align: center; border-radius: 10px 10px 0 0; }
              .content { background: #f8f9fa; padding: 2rem; }
              .button { display: inline-block; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 1rem 2rem; text-decoration: none; border-radius: 8px; font-weight: bold; margin: 1rem 0; }
              .footer { background: #333; color: white; padding: 1rem; text-align: center; font-size: 0.9rem; border-radius: 0 0 10px 10px; }
              .warning { background: #fff3cd; border: 1px solid #ffeaa7; padding: 1rem; border-radius: 5px; margin: 1rem 0; }
            </style>
          </head>
          <body>
            <div class="container">
              <div class="header">
                <h1>üîê ƒê·∫∑t L·∫°i M·∫≠t Kh·∫©u</h1>
                <p>Y√™u c·∫ßu reset m·∫≠t kh·∫©u cho t√†i kho·∫£n c·ªßa b·∫°n</p>
              </div>
              
              <div class="content">
                <h2>Xin ch√†o ${userName}!</h2>
                <p>Ch√∫ng t√¥i nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho t√†i kho·∫£n <strong>${email}</strong>.</p>
                
                <p>Nh·∫•n v√†o n√∫t b√™n d∆∞·ªõi ƒë·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u:</p>
                
                <div style="text-align: center; margin: 2rem 0;">
                  <a href="${resetUrl}" class="button">üîÑ ƒê·∫∑t L·∫°i M·∫≠t Kh·∫©u</a>
                </div>
                
                <div class="warning">
                  <strong>‚ö†Ô∏è L∆∞u √Ω quan tr·ªçng:</strong>
                  <ul>
                    <li>Link n√†y s·∫Ω h·∫øt h·∫°n sau <strong>10 ph√∫t</strong></li>
                    <li>Ch·ªâ s·ª≠ d·ª•ng ƒë∆∞·ª£c <strong>1 l·∫ßn duy nh·∫•t</strong></li>
                    <li>N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu reset m·∫≠t kh·∫©u, vui l√≤ng b·ªè qua email n√†y</li>
                  </ul>
                </div>
                
                <p>Ho·∫∑c copy v√† paste link sau v√†o tr√¨nh duy·ªát:</p>
                <p style="background: #e9ecef; padding: 1rem; border-radius: 5px; word-break: break-all; font-family: monospace; font-size: 0.9rem;">
                  ${resetUrl}
                </p>
                
                <p>N·∫øu c√≥ b·∫•t k·ª≥ th·∫Øc m·∫Øc n√†o, vui l√≤ng li√™n h·ªá v·ªõi ch√∫ng t√¥i.</p>
                
                <p>Tr√¢n tr·ªçng,<br><strong>ƒê·ªôi ng≈© H·ªó tr·ª£</strong></p>
              </div>
              
              <div class="footer">
                <p>¬© 2025 H·ªá Th·ªëng Qu·∫£n L√Ω User - Group 6 Project</p>
                <p>Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông, vui l√≤ng kh√¥ng reply.</p>
              </div>
            </div>
          </body>
          </html>
        `,
      };

      const info = await this.transporter.sendMail(mailOptions);
      console.log("Reset password email sent:", info.messageId);
      return { success: true, messageId: info.messageId };
    } catch (error) {
      console.error("Send reset password email error:", error);
      throw new Error("Failed to send reset password email");
    }
  }

  // G·ª≠i email th√¥ng b√°o m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c ƒë·ªïi
  async sendPasswordChangedEmail(email, userName) {
    try {
      const mailOptions = {
        from: `"H·ªá Th·ªëng Qu·∫£n L√Ω User" <${process.env.EMAIL_FROM}>`,
        to: email,
        subject: "‚úÖ M·∫≠t Kh·∫©u ƒê√£ ƒê∆∞·ª£c Thay ƒê·ªïi Th√†nh C√¥ng",
        html: `
          <!DOCTYPE html>
          <html>
          <head>
            <meta charset="utf-8">
            <style>
              .container { max-width: 600px; margin: 0 auto; font-family: Arial, sans-serif; }
              .header { background: linear-gradient(135deg, #10b981, #34d399); color: white; padding: 2rem; text-align: center; border-radius: 10px 10px 0 0; }
              .content { background: #f8f9fa; padding: 2rem; }
              .footer { background: #333; color: white; padding: 1rem; text-align: center; font-size: 0.9rem; border-radius: 0 0 10px 10px; }
              .success { background: #d1ecf1; border: 1px solid #bee5eb; padding: 1rem; border-radius: 5px; margin: 1rem 0; }
            </style>
          </head>
          <body>
            <div class="container">
              <div class="header">
                <h1>‚úÖ Th√†nh C√¥ng!</h1>
                <p>M·∫≠t kh·∫©u c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c thay ƒë·ªïi</p>
              </div>
              
              <div class="content">
                <h2>Xin ch√†o ${userName}!</h2>
                
                <div class="success">
                  <strong>üéâ M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!</strong>
                  <p>T√†i kho·∫£n: <strong>${email}</strong></p>
                  <p>Th·ªùi gian: <strong>${new Date().toLocaleString(
                    "vi-VN"
                  )}</strong></p>
                </div>
                
                <p>M·∫≠t kh·∫©u cho t√†i kho·∫£n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c thay ƒë·ªïi th√†nh c√¥ng. B·∫°n c√≥ th·ªÉ ƒëƒÉng nh·∫≠p v·ªõi m·∫≠t kh·∫©u m·ªõi ngay b√¢y gi·ªù.</p>
                
                <p><strong>üîí L∆∞u √Ω b·∫£o m·∫≠t:</strong></p>
                <ul>
                  <li>H√£y gi·ªØ m·∫≠t kh·∫©u m·ªõi m·ªôt c√°ch an to√†n</li>
                  <li>Kh√¥ng chia s·∫ª m·∫≠t kh·∫©u v·ªõi b·∫•t k·ª≥ ai</li>
                  <li>N·∫øu b·∫°n kh√¥ng th·ª±c hi·ªán thao t√°c n√†y, vui l√≤ng li√™n h·ªá ngay v·ªõi ch√∫ng t√¥i</li>
                </ul>
                
                <p>C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng h·ªá th·ªëng c·ªßa ch√∫ng t√¥i!</p>
                
                <p>Tr√¢n tr·ªçng,<br><strong>ƒê·ªôi ng≈© H·ªó tr·ª£</strong></p>
              </div>
              
              <div class="footer">
                <p>¬© 2025 H·ªá Th·ªëng Qu·∫£n L√Ω User - Group 6 Project</p>
                <p>Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông, vui l√≤ng kh√¥ng reply.</p>
              </div>
            </div>
          </body>
          </html>
        `,
      };

      const info = await this.transporter.sendMail(mailOptions);
      console.log("Password changed email sent:", info.messageId);
      return { success: true, messageId: info.messageId };
    } catch (error) {
      console.error("Send password changed email error:", error);
      // Kh√¥ng throw error v√¨ ƒë√¢y kh√¥ng ph·∫£i critical function
      return { success: false, error: error.message };
    }
  }

  // Test email connection
  async testConnection() {
    try {
      await this.transporter.verify();
      console.log("‚úÖ Email server is ready to take our messages");
      return true;
    } catch (error) {
      console.error("‚ùå Email server connection failed:", error);
      return false;
    }
  }
}

module.exports = new EmailService();
