const User = require("../models/User");
const emailService = require("../services/emailService");
const crypto = require("crypto");
const jwt = require("jsonwebtoken");

class AdvancedController {
  // API Forgot Password
  static async forgotPassword(req, res) {
    try {
      const { email } = req.body;

      // Validate email
      if (!email) {
        return res.status(400).json({
          success: false,
          message: "Vui l√≤ng nh·∫≠p email",
        });
      }

      // T√¨m user
      const user = await User.findOne({ email: email.toLowerCase() });
      if (!user) {
        return res.status(404).json({
          success: false,
          message: "Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n v·ªõi email n√†y",
        });
      }

      // Ki·ªÉm tra user c√≥ active kh√¥ng
      if (!user.isActive) {
        return res.status(400).json({
          success: false,
          message: "T√†i kho·∫£n ƒë√£ b·ªã v√¥ hi·ªáu h√≥a",
        });
      }

      // T·∫°o reset password token
      const resetToken = user.getResetPasswordToken();

      // L∆∞u user v·ªõi token
      await user.save({ validateBeforeSave: false });

      // C·ªë g·∫Øng g·ª≠i email, nh∆∞ng kh√¥ng fail n·∫øu l·ªói (for testing)
      try {
        await emailService.sendResetPasswordEmail(
          user.email,
          resetToken,
          user.name
        );
        console.log("‚úÖ Email sent successfully");
      } catch (emailError) {
        console.log(
          "‚ö†Ô∏è Email service not configured, but token created for testing"
        );
        console.error("Email error:", emailError.message);
      }

      // Tr·∫£ v·ªÅ success d√π email c√≥ g·ª≠i ƒë∆∞·ª£c hay kh√¥ng
      res.status(200).json({
        success: true,
        message:
          "Email h∆∞·ªõng d·∫´n ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn h·ªôp th∆∞ c·ªßa b·∫°n (ho·∫∑c token ƒë√£ ƒë∆∞·ª£c t·∫°o ƒë·ªÉ test)",
        data: {
          email: user.email,
          resetTokenExpire: user.resetPasswordExpire,
          // Th√™m resetToken ƒë·ªÉ test d·ªÖ h∆°n (ch·ªâ trong dev)
          resetToken:
            process.env.NODE_ENV === "development" ? resetToken : undefined,
        },
      });
    } catch (error) {
      console.error("Forgot password error:", error);
      res.status(500).json({
        success: false,
        message: "L·ªói server khi x·ª≠ l√Ω y√™u c·∫ßu",
      });
    }
  }

  // API Reset Password
  static async resetPassword(req, res) {
    try {
      const { token, newPassword, confirmPassword } = req.body;

      // Validate input
      if (!token || !newPassword || !confirmPassword) {
        return res.status(400).json({
          success: false,
          message: "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin",
        });
      }

      if (newPassword !== confirmPassword) {
        return res.status(400).json({
          success: false,
          message: "M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp",
        });
      }

      if (newPassword.length < 6) {
        return res.status(400).json({
          success: false,
          message: "M·∫≠t kh·∫©u m·ªõi ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±",
        });
      }

      // Hash token ƒë·ªÉ so s√°nh
      const hashedToken = crypto
        .createHash("sha256")
        .update(token)
        .digest("hex");

      // T√¨m user v·ªõi token v√† ki·ªÉm tra expiry
      const user = await User.findOne({
        resetPasswordToken: hashedToken,
        resetPasswordExpire: { $gt: Date.now() },
      }).select("+password");

      if (!user) {
        return res.status(400).json({
          success: false,
          message: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n",
        });
      }

      // Ki·ªÉm tra m·∫≠t kh·∫©u m·ªõi kh√¥ng tr√πng v·ªõi m·∫≠t kh·∫©u c≈©
      const isSamePassword = await user.comparePassword(newPassword);
      if (isSamePassword) {
        return res.status(400).json({
          success: false,
          message: "M·∫≠t kh·∫©u m·ªõi kh√¥ng ƒë∆∞·ª£c tr√πng v·ªõi m·∫≠t kh·∫©u c≈©",
        });
      }

      // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi
      user.password = newPassword;
      user.resetPasswordToken = undefined;
      user.resetPasswordExpire = undefined;
      await user.save();

      // G·ª≠i email th√¥ng b√°o
      try {
        await emailService.sendPasswordChangedEmail(user.email, user.name);
      } catch (emailError) {
        console.error("Send password changed email error:", emailError);
        // Kh√¥ng throw error v√¨ ƒë√¢y kh√¥ng ph·∫£i critical function
      }

      res.status(200).json({
        success: true,
        message:
          "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng. B·∫°n c√≥ th·ªÉ ƒëƒÉng nh·∫≠p v·ªõi m·∫≠t kh·∫©u m·ªõi",
        data: {
          email: user.email,
          name: user.name,
        },
      });
    } catch (error) {
      console.error("Reset password error:", error);
      res.status(500).json({
        success: false,
        message: "L·ªói server khi ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u",
      });
    }
  }

  // API Upload Avatar - Modified for testing without Cloudinary
  static async uploadAvatar(req, res) {
    try {
      const userId = req.user.id;

      // Ki·ªÉm tra c√≥ file upload kh√¥ng
      if (!req.file) {
        return res.status(400).json({
          success: false,
          message: "Vui l√≤ng ch·ªçn file ·∫£nh ƒë·ªÉ upload",
        });
      }

      console.log("üìÅ File uploaded:", {
        filename: req.file.originalname,
        size: req.file.size,
        mimetype: req.file.mimetype,
      });

      // T√¨m user
      const user = await User.findById(userId);
      if (!user) {
        return res.status(404).json({
          success: false,
          message: "Kh√¥ng t√¨m th·∫•y user",
        });
      }

      // T·∫°o mock avatar URL for testing (placeholder image with user name)
      const mockAvatarUrl = `https://via.placeholder.com/300x300/667eea/ffffff?text=${encodeURIComponent(
        user.name.charAt(0).toUpperCase()
      )}`;
      const mockPublicId = `mock_avatar_${userId}_${Date.now()}`;

      // C·∫≠p nh·∫≠t avatar m·ªõi v·ªõi mock data
      user.avatar = {
        url: mockAvatarUrl,
        publicId: mockPublicId,
      };

      await user.save();

      console.log("‚úÖ Avatar updated successfully with mock URL");

      res.status(200).json({
        success: true,
        message:
          "Upload avatar th√†nh c√¥ng! (Test mode - s·ª≠ d·ª•ng ·∫£nh placeholder)",
        data: {
          user: {
            id: user._id,
            name: user.name,
            email: user.email,
            avatar: user.avatar,
            role: user.role,
          },
        },
      });
    } catch (error) {
      console.error("Upload avatar error:", error);

      res.status(500).json({
        success: false,
        message: "L·ªói server khi upload avatar",
      });
    }
  }

  // API Delete Avatar
  static async deleteAvatar(req, res) {
    try {
      const userId = req.user.id;

      // T√¨m user
      const user = await User.findById(userId);
      if (!user) {
        return res.status(404).json({
          success: false,
          message: "Kh√¥ng t√¨m th·∫•y user",
        });
      }

      // Ki·ªÉm tra c√≥ avatar kh√¥ng
      if (!user.avatar || !user.avatar.url) {
        return res.status(400).json({
          success: false,
          message: "User ch∆∞a c√≥ avatar ƒë·ªÉ x√≥a",
        });
      }

      // Skip Cloudinary deletion in test mode
      console.log(
        "üóëÔ∏è Deleting avatar (test mode - no Cloudinary deletion needed)"
      );

      // X√≥a avatar t·ª´ database
      user.avatar = {
        url: "",
        publicId: "",
      };

      await user.save();

      res.status(200).json({
        success: true,
        message: "X√≥a avatar th√†nh c√¥ng",
        data: {
          user: {
            id: user._id,
            name: user.name,
            email: user.email,
            avatar: user.avatar,
            role: user.role,
          },
        },
      });
    } catch (error) {
      console.error("Delete avatar error:", error);
      res.status(500).json({
        success: false,
        message: "L·ªói server khi x√≥a avatar",
      });
    }
  }

  // API Verify Reset Token (ƒë·ªÉ check token h·ª£p l·ªá t·ª´ frontend)
  static async verifyResetToken(req, res) {
    try {
      const { token } = req.params;

      if (!token) {
        return res.status(400).json({
          success: false,
          message: "Token kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng",
        });
      }

      // Hash token ƒë·ªÉ so s√°nh
      const hashedToken = crypto
        .createHash("sha256")
        .update(token)
        .digest("hex");

      // T√¨m user v·ªõi token v√† ki·ªÉm tra expiry
      const user = await User.findOne({
        resetPasswordToken: hashedToken,
        resetPasswordExpire: { $gt: Date.now() },
      });

      if (!user) {
        return res.status(400).json({
          success: false,
          message: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n",
        });
      }

      res.status(200).json({
        success: true,
        message: "Token h·ª£p l·ªá",
        data: {
          email: user.email,
          expiresAt: user.resetPasswordExpire,
        },
      });
    } catch (error) {
      console.error("Verify reset token error:", error);
      res.status(500).json({
        success: false,
        message: "L·ªói server khi verify token",
      });
    }
  }
}

module.exports = AdvancedController;
